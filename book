{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7fd3db3c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T10:35:13.717991Z",
     "start_time": "2022-11-14T10:35:13.708759Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "7ebf5f69",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T10:35:13.749039Z",
     "start_time": "2022-11-14T10:35:13.719985Z"
    }
   },
   "outputs": [],
   "source": [
    "book = pd.read_csv(\"book (1).csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "070b6e28",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T10:35:13.764462Z",
     "start_time": "2022-11-14T10:35:13.750587Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ChildBks</th>\n",
       "      <th>YouthBks</th>\n",
       "      <th>CookBks</th>\n",
       "      <th>DoItYBks</th>\n",
       "      <th>RefBks</th>\n",
       "      <th>ArtBks</th>\n",
       "      <th>GeogBks</th>\n",
       "      <th>ItalCook</th>\n",
       "      <th>ItalAtlas</th>\n",
       "      <th>ItalArt</th>\n",
       "      <th>Florence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1995</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1998</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2000 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ChildBks  YouthBks  CookBks  DoItYBks  RefBks  ArtBks  GeogBks  \\\n",
       "0            0         1        0         1       0       0        1   \n",
       "1            1         0        0         0       0       0        0   \n",
       "2            0         0        0         0       0       0        0   \n",
       "3            1         1        1         0       1       0        1   \n",
       "4            0         0        1         0       0       0        1   \n",
       "...        ...       ...      ...       ...     ...     ...      ...   \n",
       "1995         0         0        1         0       0       1        1   \n",
       "1996         0         0        0         0       0       0        0   \n",
       "1997         0         0        0         0       0       0        0   \n",
       "1998         0         0        1         0       0       0        0   \n",
       "1999         0         0        0         0       0       0        0   \n",
       "\n",
       "      ItalCook  ItalAtlas  ItalArt  Florence  \n",
       "0            0          0        0         0  \n",
       "1            0          0        0         0  \n",
       "2            0          0        0         0  \n",
       "3            0          0        0         0  \n",
       "4            0          0        0         0  \n",
       "...        ...        ...      ...       ...  \n",
       "1995         1          0        1         1  \n",
       "1996         0          0        0         0  \n",
       "1997         0          0        0         0  \n",
       "1998         0          0        0         0  \n",
       "1999         0          0        0         0  \n",
       "\n",
       "[2000 rows x 11 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "book"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f313fee",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T10:35:13.780138Z",
     "start_time": "2022-11-14T10:35:13.766400Z"
    }
   },
   "outputs": [],
   "source": [
    "from mlxtend.frequent_patterns import apriori,association_rules\n",
    "from mlxtend.preprocessing import TransactionEncoder\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9a3ef0b",
   "metadata": {},
   "source": [
    "# Association rules with 10% support and 80% confidence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5bc38538",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T10:35:13.811366Z",
     "start_time": "2022-11-14T10:35:13.782151Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\pradeep kumar\\anaconda3\\lib\\site-packages\\mlxtend\\frequent_patterns\\fpcommon.py:111: DeprecationWarning: DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>support</th>\n",
       "      <th>itemsets</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.4230</td>\n",
       "      <td>(ChildBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.2475</td>\n",
       "      <td>(YouthBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.4310</td>\n",
       "      <td>(CookBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.2820</td>\n",
       "      <td>(DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.2145</td>\n",
       "      <td>(RefBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.2410</td>\n",
       "      <td>(ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.2760</td>\n",
       "      <td>(GeogBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.1135</td>\n",
       "      <td>(ItalCook)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.1085</td>\n",
       "      <td>(Florence)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.1650</td>\n",
       "      <td>(ChildBks, YouthBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.2560</td>\n",
       "      <td>(CookBks, ChildBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.1840</td>\n",
       "      <td>(ChildBks, DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.1515</td>\n",
       "      <td>(ChildBks, RefBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.1625</td>\n",
       "      <td>(ChildBks, ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.1950</td>\n",
       "      <td>(ChildBks, GeogBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.1620</td>\n",
       "      <td>(CookBks, YouthBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.1155</td>\n",
       "      <td>(YouthBks, DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.1010</td>\n",
       "      <td>(YouthBks, ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.1205</td>\n",
       "      <td>(GeogBks, YouthBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.1875</td>\n",
       "      <td>(CookBks, DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.1525</td>\n",
       "      <td>(CookBks, RefBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0.1670</td>\n",
       "      <td>(CookBks, ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0.1925</td>\n",
       "      <td>(CookBks, GeogBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.1135</td>\n",
       "      <td>(CookBks, ItalCook)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0.1055</td>\n",
       "      <td>(RefBks, DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0.1235</td>\n",
       "      <td>(DoItYBks, ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0.1325</td>\n",
       "      <td>(GeogBks, DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0.1105</td>\n",
       "      <td>(GeogBks, RefBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0.1275</td>\n",
       "      <td>(GeogBks, ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0.1290</td>\n",
       "      <td>(CookBks, ChildBks, YouthBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>0.1460</td>\n",
       "      <td>(CookBks, ChildBks, DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>0.1225</td>\n",
       "      <td>(CookBks, ChildBks, RefBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>0.1265</td>\n",
       "      <td>(CookBks, ChildBks, ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>0.1495</td>\n",
       "      <td>(CookBks, ChildBks, GeogBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>0.1045</td>\n",
       "      <td>(ChildBks, DoItYBks, GeogBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>0.1020</td>\n",
       "      <td>(ChildBks, GeogBks, ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>0.1015</td>\n",
       "      <td>(CookBks, DoItYBks, ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>0.1085</td>\n",
       "      <td>(CookBks, GeogBks, DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>0.1035</td>\n",
       "      <td>(CookBks, GeogBks, ArtBks)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    support                       itemsets\n",
       "0    0.4230                     (ChildBks)\n",
       "1    0.2475                     (YouthBks)\n",
       "2    0.4310                      (CookBks)\n",
       "3    0.2820                     (DoItYBks)\n",
       "4    0.2145                       (RefBks)\n",
       "5    0.2410                       (ArtBks)\n",
       "6    0.2760                      (GeogBks)\n",
       "7    0.1135                     (ItalCook)\n",
       "8    0.1085                     (Florence)\n",
       "9    0.1650           (ChildBks, YouthBks)\n",
       "10   0.2560            (CookBks, ChildBks)\n",
       "11   0.1840           (ChildBks, DoItYBks)\n",
       "12   0.1515             (ChildBks, RefBks)\n",
       "13   0.1625             (ChildBks, ArtBks)\n",
       "14   0.1950            (ChildBks, GeogBks)\n",
       "15   0.1620            (CookBks, YouthBks)\n",
       "16   0.1155           (YouthBks, DoItYBks)\n",
       "17   0.1010             (YouthBks, ArtBks)\n",
       "18   0.1205            (GeogBks, YouthBks)\n",
       "19   0.1875            (CookBks, DoItYBks)\n",
       "20   0.1525              (CookBks, RefBks)\n",
       "21   0.1670              (CookBks, ArtBks)\n",
       "22   0.1925             (CookBks, GeogBks)\n",
       "23   0.1135            (CookBks, ItalCook)\n",
       "24   0.1055             (RefBks, DoItYBks)\n",
       "25   0.1235             (DoItYBks, ArtBks)\n",
       "26   0.1325            (GeogBks, DoItYBks)\n",
       "27   0.1105              (GeogBks, RefBks)\n",
       "28   0.1275              (GeogBks, ArtBks)\n",
       "29   0.1290  (CookBks, ChildBks, YouthBks)\n",
       "30   0.1460  (CookBks, ChildBks, DoItYBks)\n",
       "31   0.1225    (CookBks, ChildBks, RefBks)\n",
       "32   0.1265    (CookBks, ChildBks, ArtBks)\n",
       "33   0.1495   (CookBks, ChildBks, GeogBks)\n",
       "34   0.1045  (ChildBks, DoItYBks, GeogBks)\n",
       "35   0.1020    (ChildBks, GeogBks, ArtBks)\n",
       "36   0.1015    (CookBks, DoItYBks, ArtBks)\n",
       "37   0.1085   (CookBks, GeogBks, DoItYBks)\n",
       "38   0.1035     (CookBks, GeogBks, ArtBks)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frequent_itemsets = apriori(book, min_support=0.1, use_colnames=True)\n",
    "frequent_itemsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "73917afc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T11:13:49.752207Z",
     "start_time": "2022-11-14T11:13:49.718404Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>antecedent support</th>\n",
       "      <th>consequent support</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>leverage</th>\n",
       "      <th>conviction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>(ItalCook)</td>\n",
       "      <td>0.4310</td>\n",
       "      <td>0.1135</td>\n",
       "      <td>0.1135</td>\n",
       "      <td>0.263341</td>\n",
       "      <td>2.320186</td>\n",
       "      <td>0.064582</td>\n",
       "      <td>1.203406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>(ItalCook)</td>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>0.1135</td>\n",
       "      <td>0.4310</td>\n",
       "      <td>0.1135</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.320186</td>\n",
       "      <td>0.064582</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>(ChildBks, ArtBks)</td>\n",
       "      <td>(GeogBks)</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2760</td>\n",
       "      <td>0.1020</td>\n",
       "      <td>0.627692</td>\n",
       "      <td>2.274247</td>\n",
       "      <td>0.057150</td>\n",
       "      <td>1.944628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>(GeogBks)</td>\n",
       "      <td>(ChildBks, ArtBks)</td>\n",
       "      <td>0.2760</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.1020</td>\n",
       "      <td>0.369565</td>\n",
       "      <td>2.274247</td>\n",
       "      <td>0.057150</td>\n",
       "      <td>1.328448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>(ArtBks)</td>\n",
       "      <td>(CookBks, DoItYBks)</td>\n",
       "      <td>0.2410</td>\n",
       "      <td>0.1875</td>\n",
       "      <td>0.1015</td>\n",
       "      <td>0.421162</td>\n",
       "      <td>2.246196</td>\n",
       "      <td>0.056313</td>\n",
       "      <td>1.403674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>(CookBks, DoItYBks)</td>\n",
       "      <td>(ArtBks)</td>\n",
       "      <td>0.1875</td>\n",
       "      <td>0.2410</td>\n",
       "      <td>0.1015</td>\n",
       "      <td>0.541333</td>\n",
       "      <td>2.246196</td>\n",
       "      <td>0.056313</td>\n",
       "      <td>1.654797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>(GeogBks)</td>\n",
       "      <td>(CookBks, ArtBks)</td>\n",
       "      <td>0.2760</td>\n",
       "      <td>0.1670</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>2.245509</td>\n",
       "      <td>0.057408</td>\n",
       "      <td>1.332800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>(CookBks, ArtBks)</td>\n",
       "      <td>(GeogBks)</td>\n",
       "      <td>0.1670</td>\n",
       "      <td>0.2760</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.619760</td>\n",
       "      <td>2.245509</td>\n",
       "      <td>0.057408</td>\n",
       "      <td>1.904063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>(ArtBks)</td>\n",
       "      <td>(CookBks, GeogBks)</td>\n",
       "      <td>0.2410</td>\n",
       "      <td>0.1925</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.429461</td>\n",
       "      <td>2.230964</td>\n",
       "      <td>0.057107</td>\n",
       "      <td>1.415327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>(CookBks, GeogBks)</td>\n",
       "      <td>(ArtBks)</td>\n",
       "      <td>0.1925</td>\n",
       "      <td>0.2410</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.537662</td>\n",
       "      <td>2.230964</td>\n",
       "      <td>0.057107</td>\n",
       "      <td>1.641657</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            antecedents          consequents  antecedent support  \\\n",
       "28            (CookBks)           (ItalCook)              0.4310   \n",
       "29           (ItalCook)            (CookBks)              0.1135   \n",
       "77   (ChildBks, ArtBks)            (GeogBks)              0.1625   \n",
       "80            (GeogBks)   (ChildBks, ArtBks)              0.2760   \n",
       "87             (ArtBks)  (CookBks, DoItYBks)              0.2410   \n",
       "82  (CookBks, DoItYBks)             (ArtBks)              0.1875   \n",
       "98            (GeogBks)    (CookBks, ArtBks)              0.2760   \n",
       "95    (CookBks, ArtBks)            (GeogBks)              0.1670   \n",
       "99             (ArtBks)   (CookBks, GeogBks)              0.2410   \n",
       "94   (CookBks, GeogBks)             (ArtBks)              0.1925   \n",
       "\n",
       "    consequent support  support  confidence      lift  leverage  conviction  \n",
       "28              0.1135   0.1135    0.263341  2.320186  0.064582    1.203406  \n",
       "29              0.4310   0.1135    1.000000  2.320186  0.064582         inf  \n",
       "77              0.2760   0.1020    0.627692  2.274247  0.057150    1.944628  \n",
       "80              0.1625   0.1020    0.369565  2.274247  0.057150    1.328448  \n",
       "87              0.1875   0.1015    0.421162  2.246196  0.056313    1.403674  \n",
       "82              0.2410   0.1015    0.541333  2.246196  0.056313    1.654797  \n",
       "98              0.1670   0.1035    0.375000  2.245509  0.057408    1.332800  \n",
       "95              0.2760   0.1035    0.619760  2.245509  0.057408    1.904063  \n",
       "99              0.1925   0.1035    0.429461  2.230964  0.057107    1.415327  \n",
       "94              0.2410   0.1035    0.537662  2.230964  0.057107    1.641657  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=0.8)\n",
    "rules\n",
    "rules.sort_values('lift',ascending = False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "af3c48ed",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T11:14:37.196910Z",
     "start_time": "2022-11-14T11:14:37.176898Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>antecedent support</th>\n",
       "      <th>consequent support</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>leverage</th>\n",
       "      <th>conviction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>(YouthBks)</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.2475</td>\n",
       "      <td>0.1650</td>\n",
       "      <td>0.390071</td>\n",
       "      <td>1.576044</td>\n",
       "      <td>0.060308</td>\n",
       "      <td>1.233750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(YouthBks)</td>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>0.2475</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.1650</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.576044</td>\n",
       "      <td>0.060308</td>\n",
       "      <td>1.731000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>0.4310</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.2560</td>\n",
       "      <td>0.593968</td>\n",
       "      <td>1.404179</td>\n",
       "      <td>0.073687</td>\n",
       "      <td>1.421069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.4310</td>\n",
       "      <td>0.2560</td>\n",
       "      <td>0.605201</td>\n",
       "      <td>1.404179</td>\n",
       "      <td>0.073687</td>\n",
       "      <td>1.441240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>(DoItYBks)</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.2820</td>\n",
       "      <td>0.1840</td>\n",
       "      <td>0.434988</td>\n",
       "      <td>1.542511</td>\n",
       "      <td>0.064714</td>\n",
       "      <td>1.270770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>(CookBks, ArtBks)</td>\n",
       "      <td>(GeogBks)</td>\n",
       "      <td>0.1670</td>\n",
       "      <td>0.2760</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.619760</td>\n",
       "      <td>2.245509</td>\n",
       "      <td>0.057408</td>\n",
       "      <td>1.904063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>(GeogBks, ArtBks)</td>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>0.1275</td>\n",
       "      <td>0.4310</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.811765</td>\n",
       "      <td>1.883445</td>\n",
       "      <td>0.048547</td>\n",
       "      <td>3.022812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>(GeogBks, ArtBks)</td>\n",
       "      <td>0.4310</td>\n",
       "      <td>0.1275</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.240139</td>\n",
       "      <td>1.883445</td>\n",
       "      <td>0.048547</td>\n",
       "      <td>1.148237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>(GeogBks)</td>\n",
       "      <td>(CookBks, ArtBks)</td>\n",
       "      <td>0.2760</td>\n",
       "      <td>0.1670</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>2.245509</td>\n",
       "      <td>0.057408</td>\n",
       "      <td>1.332800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>(ArtBks)</td>\n",
       "      <td>(CookBks, GeogBks)</td>\n",
       "      <td>0.2410</td>\n",
       "      <td>0.1925</td>\n",
       "      <td>0.1035</td>\n",
       "      <td>0.429461</td>\n",
       "      <td>2.230964</td>\n",
       "      <td>0.057107</td>\n",
       "      <td>1.415327</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          antecedents         consequents  antecedent support  \\\n",
       "0          (ChildBks)          (YouthBks)              0.4230   \n",
       "1          (YouthBks)          (ChildBks)              0.2475   \n",
       "2           (CookBks)          (ChildBks)              0.4310   \n",
       "3          (ChildBks)           (CookBks)              0.4230   \n",
       "4          (ChildBks)          (DoItYBks)              0.4230   \n",
       "..                ...                 ...                 ...   \n",
       "95  (CookBks, ArtBks)           (GeogBks)              0.1670   \n",
       "96  (GeogBks, ArtBks)           (CookBks)              0.1275   \n",
       "97          (CookBks)   (GeogBks, ArtBks)              0.4310   \n",
       "98          (GeogBks)   (CookBks, ArtBks)              0.2760   \n",
       "99           (ArtBks)  (CookBks, GeogBks)              0.2410   \n",
       "\n",
       "    consequent support  support  confidence      lift  leverage  conviction  \n",
       "0               0.2475   0.1650    0.390071  1.576044  0.060308    1.233750  \n",
       "1               0.4230   0.1650    0.666667  1.576044  0.060308    1.731000  \n",
       "2               0.4230   0.2560    0.593968  1.404179  0.073687    1.421069  \n",
       "3               0.4310   0.2560    0.605201  1.404179  0.073687    1.441240  \n",
       "4               0.2820   0.1840    0.434988  1.542511  0.064714    1.270770  \n",
       "..                 ...      ...         ...       ...       ...         ...  \n",
       "95              0.2760   0.1035    0.619760  2.245509  0.057408    1.904063  \n",
       "96              0.4310   0.1035    0.811765  1.883445  0.048547    3.022812  \n",
       "97              0.1275   0.1035    0.240139  1.883445  0.048547    1.148237  \n",
       "98              0.1670   0.1035    0.375000  2.245509  0.057408    1.332800  \n",
       "99              0.1925   0.1035    0.429461  2.230964  0.057107    1.415327  \n",
       "\n",
       "[100 rows x 9 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules[rules.lift>1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1cbd0481",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T13:10:06.031021Z",
     "start_time": "2022-11-14T13:10:05.814812Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(rules['support'],rules['confidence'])\n",
    "plt.xlabel('support')\n",
    "plt.ylabel('confidence') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "1ff576b5",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T14:07:46.100491Z",
     "start_time": "2022-11-14T14:07:45.151350Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(rules.support,rules.confidence, \"rs\")\n",
    "plt.xlabel(\"support\")\n",
    "plt.ylabel(\"confidence\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf5ccc86",
   "metadata": {},
   "source": [
    "# Association rules with 20% support and 60% confidence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "9f2f0a92",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T13:51:09.254624Z",
     "start_time": "2022-11-14T13:51:09.229994Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\pradeep kumar\\anaconda3\\lib\\site-packages\\mlxtend\\frequent_patterns\\fpcommon.py:111: DeprecationWarning: DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>support</th>\n",
       "      <th>itemsets</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.4230</td>\n",
       "      <td>(ChildBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.2475</td>\n",
       "      <td>(YouthBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.4310</td>\n",
       "      <td>(CookBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.2820</td>\n",
       "      <td>(DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.2145</td>\n",
       "      <td>(RefBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.2410</td>\n",
       "      <td>(ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.2760</td>\n",
       "      <td>(GeogBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.2560</td>\n",
       "      <td>(CookBks, ChildBks)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   support             itemsets\n",
       "0   0.4230           (ChildBks)\n",
       "1   0.2475           (YouthBks)\n",
       "2   0.4310            (CookBks)\n",
       "3   0.2820           (DoItYBks)\n",
       "4   0.2145             (RefBks)\n",
       "5   0.2410             (ArtBks)\n",
       "6   0.2760            (GeogBks)\n",
       "7   0.2560  (CookBks, ChildBks)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frequent_itemsets2 = apriori(book, min_support=0.20, use_colnames=True)\n",
    "frequent_itemsets2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "264029f4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T13:51:29.111050Z",
     "start_time": "2022-11-14T13:51:29.078756Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>antecedent support</th>\n",
       "      <th>consequent support</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>leverage</th>\n",
       "      <th>conviction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>0.431</td>\n",
       "      <td>0.423</td>\n",
       "      <td>0.256</td>\n",
       "      <td>0.593968</td>\n",
       "      <td>1.404179</td>\n",
       "      <td>0.073687</td>\n",
       "      <td>1.421069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>0.423</td>\n",
       "      <td>0.431</td>\n",
       "      <td>0.256</td>\n",
       "      <td>0.605201</td>\n",
       "      <td>1.404179</td>\n",
       "      <td>0.073687</td>\n",
       "      <td>1.441240</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  antecedents consequents  antecedent support  consequent support  support  \\\n",
       "0   (CookBks)  (ChildBks)               0.431               0.423    0.256   \n",
       "1  (ChildBks)   (CookBks)               0.423               0.431    0.256   \n",
       "\n",
       "   confidence      lift  leverage  conviction  \n",
       "0    0.593968  1.404179  0.073687    1.421069  \n",
       "1    0.605201  1.404179  0.073687    1.441240  "
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules2 = association_rules(frequent_itemsets2, metric=\"lift\", min_threshold=0.6)\n",
    "rules2\n",
    "rules2.sort_values('lift',ascending = False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "b52bf39e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T13:51:39.668831Z",
     "start_time": "2022-11-14T13:51:39.636214Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>antecedent support</th>\n",
       "      <th>consequent support</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>leverage</th>\n",
       "      <th>conviction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>0.431</td>\n",
       "      <td>0.423</td>\n",
       "      <td>0.256</td>\n",
       "      <td>0.593968</td>\n",
       "      <td>1.404179</td>\n",
       "      <td>0.073687</td>\n",
       "      <td>1.421069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>0.423</td>\n",
       "      <td>0.431</td>\n",
       "      <td>0.256</td>\n",
       "      <td>0.605201</td>\n",
       "      <td>1.404179</td>\n",
       "      <td>0.073687</td>\n",
       "      <td>1.441240</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  antecedents consequents  antecedent support  consequent support  support  \\\n",
       "0   (CookBks)  (ChildBks)               0.431               0.423    0.256   \n",
       "1  (ChildBks)   (CookBks)               0.423               0.431    0.256   \n",
       "\n",
       "   confidence      lift  leverage  conviction  \n",
       "0    0.593968  1.404179  0.073687    1.421069  \n",
       "1    0.605201  1.404179  0.073687    1.441240  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules2[rules2.lift>1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "c23be631",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T13:51:42.626024Z",
     "start_time": "2022-11-14T13:51:42.469647Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(rules2['support'],rules2['confidence'])\n",
    "plt.xlabel('support')\n",
    "plt.ylabel('confidence') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "108018c8",
   "metadata": {},
   "source": [
    "# Association rules with 5% support and 80% confidence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "e88b11ff",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T13:34:21.721614Z",
     "start_time": "2022-11-14T13:34:21.674863Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\pradeep kumar\\anaconda3\\lib\\site-packages\\mlxtend\\frequent_patterns\\fpcommon.py:111: DeprecationWarning: DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>support</th>\n",
       "      <th>itemsets</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.4230</td>\n",
       "      <td>(ChildBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.2475</td>\n",
       "      <td>(YouthBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.4310</td>\n",
       "      <td>(CookBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.2820</td>\n",
       "      <td>(DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.2145</td>\n",
       "      <td>(RefBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>0.0600</td>\n",
       "      <td>(CookBks, GeogBks, YouthBks, DoItYBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>0.0560</td>\n",
       "      <td>(CookBks, GeogBks, YouthBks, ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>0.0650</td>\n",
       "      <td>(CookBks, GeogBks, DoItYBks, ArtBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>0.0510</td>\n",
       "      <td>(YouthBks, DoItYBks, CookBks, GeogBks, ChildBks)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>0.0535</td>\n",
       "      <td>(DoItYBks, CookBks, GeogBks, ArtBks, ChildBks)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    support                                          itemsets\n",
       "0    0.4230                                        (ChildBks)\n",
       "1    0.2475                                        (YouthBks)\n",
       "2    0.4310                                         (CookBks)\n",
       "3    0.2820                                        (DoItYBks)\n",
       "4    0.2145                                          (RefBks)\n",
       "..      ...                                               ...\n",
       "95   0.0600            (CookBks, GeogBks, YouthBks, DoItYBks)\n",
       "96   0.0560              (CookBks, GeogBks, YouthBks, ArtBks)\n",
       "97   0.0650              (CookBks, GeogBks, DoItYBks, ArtBks)\n",
       "98   0.0510  (YouthBks, DoItYBks, CookBks, GeogBks, ChildBks)\n",
       "99   0.0535    (DoItYBks, CookBks, GeogBks, ArtBks, ChildBks)\n",
       "\n",
       "[100 rows x 2 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frequent_itemsets3 = apriori(book, min_support=0.05, use_colnames=True)\n",
    "frequent_itemsets3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3656e11c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T13:35:09.090992Z",
     "start_time": "2022-11-14T13:35:09.029775Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>antecedent support</th>\n",
       "      <th>consequent support</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>leverage</th>\n",
       "      <th>conviction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>(CookBks, YouthBks)</td>\n",
       "      <td>(ItalCook)</td>\n",
       "      <td>0.1620</td>\n",
       "      <td>0.1135</td>\n",
       "      <td>0.0590</td>\n",
       "      <td>0.364198</td>\n",
       "      <td>3.208789</td>\n",
       "      <td>0.040613</td>\n",
       "      <td>1.394301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>(ItalCook)</td>\n",
       "      <td>(CookBks, YouthBks)</td>\n",
       "      <td>0.1135</td>\n",
       "      <td>0.1620</td>\n",
       "      <td>0.0590</td>\n",
       "      <td>0.519824</td>\n",
       "      <td>3.208789</td>\n",
       "      <td>0.040613</td>\n",
       "      <td>1.745193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>510</th>\n",
       "      <td>(CookBks, GeogBks)</td>\n",
       "      <td>(ChildBks, ItalCook)</td>\n",
       "      <td>0.1925</td>\n",
       "      <td>0.0850</td>\n",
       "      <td>0.0525</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>3.208556</td>\n",
       "      <td>0.036137</td>\n",
       "      <td>1.258125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>511</th>\n",
       "      <td>(ChildBks, ItalCook)</td>\n",
       "      <td>(CookBks, GeogBks)</td>\n",
       "      <td>0.0850</td>\n",
       "      <td>0.1925</td>\n",
       "      <td>0.0525</td>\n",
       "      <td>0.617647</td>\n",
       "      <td>3.208556</td>\n",
       "      <td>0.036137</td>\n",
       "      <td>2.111923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>508</th>\n",
       "      <td>(CookBks, ChildBks)</td>\n",
       "      <td>(GeogBks, ItalCook)</td>\n",
       "      <td>0.2560</td>\n",
       "      <td>0.0640</td>\n",
       "      <td>0.0525</td>\n",
       "      <td>0.205078</td>\n",
       "      <td>3.204346</td>\n",
       "      <td>0.036116</td>\n",
       "      <td>1.177474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>513</th>\n",
       "      <td>(GeogBks, ItalCook)</td>\n",
       "      <td>(CookBks, ChildBks)</td>\n",
       "      <td>0.0640</td>\n",
       "      <td>0.2560</td>\n",
       "      <td>0.0525</td>\n",
       "      <td>0.820312</td>\n",
       "      <td>3.204346</td>\n",
       "      <td>0.036116</td>\n",
       "      <td>4.140522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>645</th>\n",
       "      <td>(CookBks, ChildBks, ArtBks)</td>\n",
       "      <td>(GeogBks, DoItYBks)</td>\n",
       "      <td>0.1265</td>\n",
       "      <td>0.1325</td>\n",
       "      <td>0.0535</td>\n",
       "      <td>0.422925</td>\n",
       "      <td>3.191886</td>\n",
       "      <td>0.036739</td>\n",
       "      <td>1.503271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>648</th>\n",
       "      <td>(GeogBks, DoItYBks)</td>\n",
       "      <td>(CookBks, ChildBks, ArtBks)</td>\n",
       "      <td>0.1325</td>\n",
       "      <td>0.1265</td>\n",
       "      <td>0.0535</td>\n",
       "      <td>0.403774</td>\n",
       "      <td>3.191886</td>\n",
       "      <td>0.036739</td>\n",
       "      <td>1.465047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>516</th>\n",
       "      <td>(ItalCook)</td>\n",
       "      <td>(CookBks, ChildBks, GeogBks)</td>\n",
       "      <td>0.1135</td>\n",
       "      <td>0.1495</td>\n",
       "      <td>0.0525</td>\n",
       "      <td>0.462555</td>\n",
       "      <td>3.094014</td>\n",
       "      <td>0.035532</td>\n",
       "      <td>1.582488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>505</th>\n",
       "      <td>(CookBks, ChildBks, GeogBks)</td>\n",
       "      <td>(ItalCook)</td>\n",
       "      <td>0.1495</td>\n",
       "      <td>0.1135</td>\n",
       "      <td>0.0525</td>\n",
       "      <td>0.351171</td>\n",
       "      <td>3.094014</td>\n",
       "      <td>0.035532</td>\n",
       "      <td>1.366307</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      antecedents                   consequents  \\\n",
       "180           (CookBks, YouthBks)                    (ItalCook)   \n",
       "185                    (ItalCook)           (CookBks, YouthBks)   \n",
       "510            (CookBks, GeogBks)          (ChildBks, ItalCook)   \n",
       "511          (ChildBks, ItalCook)            (CookBks, GeogBks)   \n",
       "508           (CookBks, ChildBks)           (GeogBks, ItalCook)   \n",
       "513           (GeogBks, ItalCook)           (CookBks, ChildBks)   \n",
       "645   (CookBks, ChildBks, ArtBks)           (GeogBks, DoItYBks)   \n",
       "648           (GeogBks, DoItYBks)   (CookBks, ChildBks, ArtBks)   \n",
       "516                    (ItalCook)  (CookBks, ChildBks, GeogBks)   \n",
       "505  (CookBks, ChildBks, GeogBks)                    (ItalCook)   \n",
       "\n",
       "     antecedent support  consequent support  support  confidence      lift  \\\n",
       "180              0.1620              0.1135   0.0590    0.364198  3.208789   \n",
       "185              0.1135              0.1620   0.0590    0.519824  3.208789   \n",
       "510              0.1925              0.0850   0.0525    0.272727  3.208556   \n",
       "511              0.0850              0.1925   0.0525    0.617647  3.208556   \n",
       "508              0.2560              0.0640   0.0525    0.205078  3.204346   \n",
       "513              0.0640              0.2560   0.0525    0.820312  3.204346   \n",
       "645              0.1265              0.1325   0.0535    0.422925  3.191886   \n",
       "648              0.1325              0.1265   0.0535    0.403774  3.191886   \n",
       "516              0.1135              0.1495   0.0525    0.462555  3.094014   \n",
       "505              0.1495              0.1135   0.0525    0.351171  3.094014   \n",
       "\n",
       "     leverage  conviction  \n",
       "180  0.040613    1.394301  \n",
       "185  0.040613    1.745193  \n",
       "510  0.036137    1.258125  \n",
       "511  0.036137    2.111923  \n",
       "508  0.036116    1.177474  \n",
       "513  0.036116    4.140522  \n",
       "645  0.036739    1.503271  \n",
       "648  0.036739    1.465047  \n",
       "516  0.035532    1.582488  \n",
       "505  0.035532    1.366307  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules3 = association_rules(frequent_itemsets3, metric=\"lift\", min_threshold=0.8)\n",
    "rules3\n",
    "rules3.sort_values('lift',ascending = False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "d7739496",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T13:36:28.335880Z",
     "start_time": "2022-11-14T13:36:28.291463Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>antecedent support</th>\n",
       "      <th>consequent support</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>leverage</th>\n",
       "      <th>conviction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>(YouthBks)</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.2475</td>\n",
       "      <td>0.1650</td>\n",
       "      <td>0.390071</td>\n",
       "      <td>1.576044</td>\n",
       "      <td>0.060308</td>\n",
       "      <td>1.233750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(YouthBks)</td>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>0.2475</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.1650</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.576044</td>\n",
       "      <td>0.060308</td>\n",
       "      <td>1.731000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>0.4310</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.2560</td>\n",
       "      <td>0.593968</td>\n",
       "      <td>1.404179</td>\n",
       "      <td>0.073687</td>\n",
       "      <td>1.421069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.4310</td>\n",
       "      <td>0.2560</td>\n",
       "      <td>0.605201</td>\n",
       "      <td>1.404179</td>\n",
       "      <td>0.073687</td>\n",
       "      <td>1.441240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>(DoItYBks)</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.2820</td>\n",
       "      <td>0.1840</td>\n",
       "      <td>0.434988</td>\n",
       "      <td>1.542511</td>\n",
       "      <td>0.064714</td>\n",
       "      <td>1.270770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>657</th>\n",
       "      <td>(DoItYBks)</td>\n",
       "      <td>(CookBks, GeogBks, ChildBks, ArtBks)</td>\n",
       "      <td>0.2820</td>\n",
       "      <td>0.0835</td>\n",
       "      <td>0.0535</td>\n",
       "      <td>0.189716</td>\n",
       "      <td>2.272052</td>\n",
       "      <td>0.029953</td>\n",
       "      <td>1.131085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>658</th>\n",
       "      <td>(CookBks)</td>\n",
       "      <td>(GeogBks, ChildBks, DoItYBks, ArtBks)</td>\n",
       "      <td>0.4310</td>\n",
       "      <td>0.0595</td>\n",
       "      <td>0.0535</td>\n",
       "      <td>0.124130</td>\n",
       "      <td>2.086217</td>\n",
       "      <td>0.027856</td>\n",
       "      <td>1.073789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>659</th>\n",
       "      <td>(GeogBks)</td>\n",
       "      <td>(CookBks, ChildBks, DoItYBks, ArtBks)</td>\n",
       "      <td>0.2760</td>\n",
       "      <td>0.0820</td>\n",
       "      <td>0.0535</td>\n",
       "      <td>0.193841</td>\n",
       "      <td>2.363910</td>\n",
       "      <td>0.030868</td>\n",
       "      <td>1.138733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>660</th>\n",
       "      <td>(ArtBks)</td>\n",
       "      <td>(CookBks, GeogBks, ChildBks, DoItYBks)</td>\n",
       "      <td>0.2410</td>\n",
       "      <td>0.0890</td>\n",
       "      <td>0.0535</td>\n",
       "      <td>0.221992</td>\n",
       "      <td>2.494289</td>\n",
       "      <td>0.032051</td>\n",
       "      <td>1.170939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>661</th>\n",
       "      <td>(ChildBks)</td>\n",
       "      <td>(CookBks, GeogBks, DoItYBks, ArtBks)</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>0.0650</td>\n",
       "      <td>0.0535</td>\n",
       "      <td>0.126478</td>\n",
       "      <td>1.945808</td>\n",
       "      <td>0.026005</td>\n",
       "      <td>1.070379</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>662 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    antecedents                             consequents  antecedent support  \\\n",
       "0    (ChildBks)                              (YouthBks)              0.4230   \n",
       "1    (YouthBks)                              (ChildBks)              0.2475   \n",
       "2     (CookBks)                              (ChildBks)              0.4310   \n",
       "3    (ChildBks)                               (CookBks)              0.4230   \n",
       "4    (ChildBks)                              (DoItYBks)              0.4230   \n",
       "..          ...                                     ...                 ...   \n",
       "657  (DoItYBks)    (CookBks, GeogBks, ChildBks, ArtBks)              0.2820   \n",
       "658   (CookBks)   (GeogBks, ChildBks, DoItYBks, ArtBks)              0.4310   \n",
       "659   (GeogBks)   (CookBks, ChildBks, DoItYBks, ArtBks)              0.2760   \n",
       "660    (ArtBks)  (CookBks, GeogBks, ChildBks, DoItYBks)              0.2410   \n",
       "661  (ChildBks)    (CookBks, GeogBks, DoItYBks, ArtBks)              0.4230   \n",
       "\n",
       "     consequent support  support  confidence      lift  leverage  conviction  \n",
       "0                0.2475   0.1650    0.390071  1.576044  0.060308    1.233750  \n",
       "1                0.4230   0.1650    0.666667  1.576044  0.060308    1.731000  \n",
       "2                0.4230   0.2560    0.593968  1.404179  0.073687    1.421069  \n",
       "3                0.4310   0.2560    0.605201  1.404179  0.073687    1.441240  \n",
       "4                0.2820   0.1840    0.434988  1.542511  0.064714    1.270770  \n",
       "..                  ...      ...         ...       ...       ...         ...  \n",
       "657              0.0835   0.0535    0.189716  2.272052  0.029953    1.131085  \n",
       "658              0.0595   0.0535    0.124130  2.086217  0.027856    1.073789  \n",
       "659              0.0820   0.0535    0.193841  2.363910  0.030868    1.138733  \n",
       "660              0.0890   0.0535    0.221992  2.494289  0.032051    1.170939  \n",
       "661              0.0650   0.0535    0.126478  1.945808  0.026005    1.070379  \n",
       "\n",
       "[662 rows x 9 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules3[rules3.lift>1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "d0ce640f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-14T13:37:04.824962Z",
     "start_time": "2022-11-14T13:37:04.662105Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(rules3['support'],rules3['confidence'])\n",
    "plt.xlabel('support')\n",
    "plt.ylabel('confidence') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a3190cc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b34a1832",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
